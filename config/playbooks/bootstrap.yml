# the first play is to set up the ansible user (as root) and ensure
# that the key necessary to access the machine is present
# we also have to add the ansible user to the wheel group
# so that it can sudo

# there may be the issue with notty as well.

# we need to define a group of bootstrap hosts which have not yet been 
# touched by ansible. These are directly created-vm's e.g.

# Note that this playbook has to be executed with --ask-pass since we are
# connecting for the first time. 
--- 
- hosts: bootstrap
  remote_user: root
  #ask_pass: true
  tasks:
    - name: test connection
      ping:
    - name: create ansible user
      user: name=ansible comment="ansible user created by bootstrap playbook" generate_ssh_key=yes groups=wheel
    - name: Ensure that python bindings for SELinux are present
      yum: name=libselinux-python state=present
    - name: disable SELinux
      selinux: state=disabled
# at this point, we have to reboot
      notify:
        - reboot
      async: 60
      poll: 15
    - name: include (only) my rsa key in authorized_keys
      copy: src=files/id_rsa.pub.becker.serbaggio dest=/home/ansible/.ssh/authorized_keys owner=ansible mode=400
# probably better to use "lineinfile" here http://docs.ansible.com/lineinfile_module.html
    - name: update sudoers to ensure ansible user can sudo
      copy: src=files/etc/sudoers dest=/etc/sudoers owner=root mode=644
    - name: ensure that mlocate is present and db is regenerated
      yum: name=mlocate state=present
      notify: updatedb
#  - include: tasks/prep.yml       
# other things to include in here
# 1. ensure that dns servers are inserted properly
# 2. include own host name and ip in /etc/hosts
  handlers:
    - name: reboot
      action: shell /sbin/reboot
    - name: updatedb
      action: command updatedb
