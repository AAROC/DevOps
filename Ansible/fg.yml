---
# First play - create the containers
# make sure deploy-hosts is set properly in your inventory
# it should have everything necessary to use the Docker container module
# http://docs.ansible.com/ansible/docker_container_module.html

# The db container requires some passwords to be passed at run creation time.
# You should pass these as variables on the command line :
# ansible-container -i <path-to-docker.py> site.yml -e mysql_root_password=<password>
# The playbook will fail unless you pass that var.

- hosts: localhost
  name: Create containers
  connection: local
  # roles:
  #   - docker
  tasks:
  - name: create the db container
    docker_container:
      name: fg_db
      image: "mysql:5.7"
      hostname: fg_db
      exposed_ports: 3306
      env:
        MYSQL_ROOT_PASSWORD="{{ mysql_root_password }}"
      state: started
    register: db_container
  - name:
    wait_for_connection:
  # - name: wait for db to come up
  #   wait_for:
  #     host: db_container.ansible_facts.docker_container.NetworkSettings.IPAddress
  #     port: 3306
  #     timeout: 10
  - name: Create the APIserver container
    docker_container:
      name: fg_api
      image: "httpd"
      hostname: fg_api
      exposed_ports:
        - 8888:8888
        - 80:80
      state: started
      # command: ['/bin/sleep', 'infinity']
    register: api_container
  - name: Create Tomcat Container
    docker_container:
      name: fg_ge
      image: "tomcat:7-jre7"
      hostname: fg_ge

  - meta: refresh_inventory
  - name: Add hosts to FutureGateway group
    add_host:
      name: "{{ item }}"
      groups: futuregateway
    with_items:
      - fg_ge
      - fg_db
      - fg_api
  - meta: refresh_inventory

- name: Get them the python !
  hosts: fg_db, fg_api, fg_ge
  connection: docker
  gather_facts: no
  tags:
    - db
    - ge
    - api
  tasks:
    - raw: which python || apt-get update &&  apt-get install -y python

- name: Create DB
  hosts: fg_db
  connection: docker
  roles:
    - { role: AAROC.fg-db, tags: ["db"]}

- name: Create API Server
  hosts: fg_api
  connection: docker
  roles:
    - { role: AAROC.fg-api, tags: ["api"]}

- name: Deploy GridEngine
  hosts: fg_ge
  connection: docker
  roles:
    - { role: AAROC.fg-ge, host_ut_db_host: "{{hostvars['fg_db']['docker_networksettings']['IPAddress']}}", fg_db_host: "{{hostvars['fg_db']['docker_networksettings']['IPAddress']}}", tags: ["ge"]}


# If you got this far, push those suckers
- name: Push images
  hosts: localhost
  vars:
    - docker_repo_org: aaroc
  tags:
    - ge
    - api
    - db
  tasks:
    - name: Commit the images
      command: "docker commit -a 'Bruce Becker <brucellino@gmail.com>' {{ item }} quay.io/aaroc/{{ item }}"
      with_items:
        - fg_ge
        - fg_db
        - fg_api
      tags:
        - dev
        - images
    - name: Log in to Quay
      docker_login:
        registry: https://quay.io
        username: "{{ registry_user }}"
        password: "{{ registry_pass }}"
        email: "{{ registry_email }}"
      tags:
        - dev
        - images

    - name: Push images
      docker_image:
        name: "{{ item }}"
        push: yes
        repository: "https://quay.io/aaroc/{{ item }}"
      tags:
        - dev
        - images
      with_items:
        - fg_ge
        - fg_db
        - fg_api
