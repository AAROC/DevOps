---
# This set of tasks will configure java's keystore properly for you. If you have a certificate signed by a commercial CA
# such as Comodo, you should put it in files/cert.crt
# if you don't have a host certificate, we use this command to generate a new CSR which you can send to the CA and a
# self-signed certificate will be added to the keychain in the meantime

# Check if there is a certificate - this only works for v2.0 of Ansible
# - name: Check if there is a certificate locally
#   local_action:
#     module: find paths='files' patterns=*cer
#   register: local_cert

- name: Check if there is a certificate locally
  local_action:
    module: stat
    path: "roles/certificates/files/commercial/{{ hostvars[groups['shibboleth-idps'][0]]['ansible_fqdn'] | replace('.','_') }}_cert.cer"
  register: have_cert

- name: Check if there is a key locally
  local_action:
    module: stat
    path: "roles/certificates/files/commercial/{{ hostvars[groups['shibboleth-idps'][0]]['ansible_fqdn'] | replace('.','_') }}.key"
  register: have_key

- name: Define certificate status
  local_action:
    module: set_fact
    cert: "{{ have_cert.stat.exists and have_key.stat.exists }}"

- name: What is cert status ?
  debug: var=cert

- name: Debug have cert
  debug:
    var: have_{{ item }}.stat.exists
  with_items:
    - cert
    - key

- name: extract the subject
  local_action:
    module: command /usr/bin/openssl x509 -noout -subject -in "{{ lookup('env','PWD')}}/roles/certificates/files/commercial/{{ hostvars[groups['shibboleth-idps'][0]]['ansible_fqdn'] | replace('.','_') }}_cert.cer"
  register: subject
  when: cert
  ignore_errors: true

- name: Debug subject
  debug:
    var: "{{ subject.stdout | regex_replace('^.*N(.*)$' ) }}"
  tags:
    - debug

- name: debug CA certs
  debug:
    var: cert_CA_certificates


- name: Push the intermediate and root cert
  copy:
    src: "roles/certificates/files/commercial/{{ item }}"
    dest: "{{ ansible_env.HOME }}/{{ item }}"
  with_items:
    - "{{ cert_CA_certificates }}"

# Does the p12 exist ?
- name: Does the p12 exist ?
  local_action:
    module: stat
    path: "{{ lookup('env','PWD') }}/roles/certificates/files/commercial/{{ hostvars[groups['shibboleth-idps'][0]]['ansible_fqdn'] | replace('.','_')}}.p12"
  register: p12

- name: What's in p12?
  debug:
    var: p12
  tags:
    - debug

- name: generate the p12
  local_action:
    module: "command openssl pkcs12 -export -in {{ lookup('env','PWD')}}/roles/certificates/files/commercial/{{ hostvars[groups['shibboleth-idps'][0]]['ansible_fqdn'] | replace('.','_')}}_cert.cer -inkey {{ lookup('env','PWD')}}/roles/certificates/files/commercial/{{ hostvars[groups['shibboleth-idps'][0]]['ansible_fqdn'] | replace('.','_')}}.key  -out test.p12 -passout pass:password"


- name: Push the p12
  copy:
    src: "test.p12"
    dest: "{{ ansible_env.HOME }}/idp.p12"

- name: Add the cert to the keystore
  command:  keytool -noprompt  -importkeystore -srckeystore idp.p12 -destkeystore test.jks -srcstoretype pkcs12 -srcstorepass password -deststorepass password



# If the certificate is not available, we need to generate a self-signed and add it to the keystore
- name: Tell the admin that we're using self-signed
  local_action:
    module: set-fact
    idp_status: test
  when: cert == false

- name: Copy JKS generator script
  template: src=jks.expect.j2 dest={{ tomcat6_config_path }}/jks.expect mode="u+x"
  when: have_cert.stat.exists == false and have_key.stat.exists == false

- name: Create JKS for tomcat
  sudo: yes
  command: creates={{ tomcat6_config_path }}/keystore.jks chdir={{ tomcat6_config_path }} ./jks.expect
  when: have_cert.stat.exists == false and have_key.stat.exists == false
