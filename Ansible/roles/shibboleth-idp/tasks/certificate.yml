---
# This set of tasks will configure java's keystore properly for you. If you have a certificate signed by a commercial CA
# such as Comodo, you should put it in files/cert.crt
# if you don't have a host certificate, we use this command to generate a new CSR which you can send to the CA and a
# self-signed certificate will be added to the keychain in the meantime

- name: Check if there is a certificate locally
  local_action:
    module: stat
    path: "roles/certificates/files/commercial/{{ hostvars[groups['shibboleth-idps'][0]]['ansible_fqdn'] | replace('.','_') }}_cert.cer"
  tags:
    - certificates
  register: have_cert

- name: Check if there is a key locally
  local_action:
    module: stat
    path: "roles/certificates/files/commercial/{{ hostvars[groups['shibboleth-idps'][0]]['ansible_fqdn'] | replace('.','_') }}.key"
  tags:
    - certificates
  register: have_key

- name: Define certificate status
  set_fact:
    cert: "{{ have_cert.stat.exists and have_key.stat.exists }} "
  tags:
    - certificates

- name: What is cert status ?
  debug: var=cert
  tags:
    - certificates

- name: Debug have cert
  debug:
    var: have_{{ item }}.stat.exists
  with_items:
    - cert
    - key
  tags:
    - certificates

############ <self-signed cert> ##################################
# these tasks were taken from the LDAP role security tasks
- name: Generate the private key for certificate request
  become: yes
  shell: "openssl genrsa -des3 -passout pass:{{ cert_password }} -out idp.key 1024"
  args:
    creates: idp.key
  when:  have_cert.stat.exists == False
  tags:
    - certificates

- name: Strip the passphrase from the key
  become: yes
  shell: "openssl rsa -in my.key -passin pass:{{ cert_password }} -out my.key"
  args:
    creates: my.key
  when: have_cert.stat.exists  == False
  tags:
    - certificates

- name: Create and sign the the new certificate
  become: yes
  shell: "openssl req -new -x509 -subj '/C={{ server_country }}/ST={{ server_state }}/L={{ server_location }}/O={{ server_organization }}/CN={{ ansible_hostname }}/' -days 3650 -key my.key -out cert.crt -extensions v3_ca"
  args:
    creates: cert.crt
  when: have_cert.stat.exists == False
  tags:
    - certificates

################## </Self-signed>#############################

################## <Cert in repo>############################
# These tasks get run when the cert actually exists locally.
# from https://support.comodo.com/index.php?/Default/Knowledgebase/Article/View/638/37/certificate-installation-java-based-web-servers-tomcat-using-keytool
#  keytool -import -trustcacerts -alias AddTrustExternalCARoot -file AddTrustExternalCARoot.crt -keystore domain.keystore

- name: Extract the subject of the certificate
  local_action:
    module: command
    args: "/usr/bin/openssl x509 -noout -subject -in {{ lookup('env','PWD')}}/roles/certificates/files/commercial/{{ hostvars[groups['shibboleth-idps'][0]]['ansible_fqdn'] | replace('.','_') }}_cert.cer"
  register: cert_subject
  when: cert
#  ignore_errors: true
  changed_when: false
  tags:
    - certificates

# - name: Debug subject
#   debug:
#     var: "{{ item | regex_replace('^.*N(.*)$' ) }}"
#   with_items:
#     - "cert_subject.stdout_lines"
#   tags:
#     - debug
#     - certificates
#
# - name: debug CA certs variable
#   debug:
#     var: cert_CA_certificates
#   tags:
#     - certificates


- name: Push the intermediate and root cert
  copy:
    src: "roles/certificates/files/commercial/{{ item }}"
    dest: "{{ ansible_env.HOME }}/{{ item }}"
  with_items:
    - "{{ cert_CA_certificates }}"
  tags:
    - certificates


# Create p12 to avoid missing ciphers issue.
# see http://stackoverflow.com/questions/906402/importing-an-existing-x509-certificate-and-private-key-in-java-keystore-to-use-i

- name: Does the p12 exist ?
  local_action:
    module: stat
    path: "{{ lookup('env','PWD') }}/roles/certificates/files/commercial/{{ hostvars[groups['shibboleth-idps'][0]]['ansible_fqdn'] | replace('.','_')}}.p12"
  register: p12
  when: have_cert.stat.exists == False
  tags:
    - certificates

- name: generate the p12
  local_action:
    module: raw
    args: "openssl pkcs12 -export -in {{ lookup('env','PWD')}}/roles/certificates/files/commercial/{{ hostvars[groups['shibboleth-idps'][0]]['ansible_fqdn'] | replace('.','_')}}_cert.cer -inkey {{ lookup('env','PWD')}}/roles/certificates/files/commercial/{{ hostvars[groups['shibboleth-idps'][0]]['ansible_fqdn'] | replace('.','_')}}.key  -out {{ hostvars[groups['shibboleth-idps'][0]]['ansible_fqdn'] }}.p12 -passout pass:{{ cert_password }}"
  #when: "{{ p12.stat.exists | default(false) }} == false &&  'have_cert.stat.exists == False'"
  tags:
    - certificates

- name: Push the p12
  copy:
    src: "{{ hostvars[groups['shibboleth-idps'][0]]['ansible_fqdn'] }}.p12"
    dest: "{{ ansible_env.HOME }}/idp.p12"
  tags:
    - certificates


# - name: Push the host cert
#   copy:
#     src: "{{ lookup('env','PWD')}}/roles/certificates/files/commercial/{{ hostvars[groups['shibboleth-idps'][0]]['ansible_fqdn'] | replace('.','_') }}_cert.cer"
#     dest: "{{ ansible_env.HOME }}/{{ hostvars[groups['shibboleth-idps'][0]]['ansible_fqdn'] | replace('.','_') }}_cert.cer"
#   tags:
#     - certificates


# TODO - this should be in a block

#
# - name: What's in p12?
#   debug:
#     var: p12
#   when: "p12.exists &&   have_cert.stat.exists == False"
#   tags:
#     - debug
#     - certificates
#
#
# See https://support.comodo.com/index.php?/Default/Knowledgebase/Article/View/620/0/
# and https://support.comodo.com/index.php?/Default/Knowledgebase/Article/View/979/108/domain-validation-sha-2
# the order is :
#    UserTrust / AddTrust External Root
#    COMODO RSA Certification Authority
#    COMODO RSA Domain Validation Secure Server CA
#    End-Entity/Domain Certificate

- name: Get CA Certs in keytool
  become: true
  raw: "/usr/bin/keytool -list -noprompt -keystore {{ tomcat6_config_path }}/domain.keystore -storepass {{ keystore_password }}"
  when:


- name: Add CA cert to the keystore
  become: true
  raw: "/usr/bin/keytool  -import -noprompt -trustcacerts -alias {{ item }} -file {{ ansible_env.HOME }}/{{ item }}.crt -keystore {{ tomcat6_config_path }}/domain.keystore -storepass {{ keystore_password }}"
    #creates: "{{ tomcat6_config_path }}/domain.keystore.jks"
  with_items:
    - AddTrustExternalCARoot
    - COMODORSAAddTrustCA
    - COMODORSADomainValidationSecureServerCA
  ignore_errors: true
# for some reason, we get errors like  {"changed": false, "failed": true, "module_stderr": "", "module_stdout": "Traceback (most recent call last):\r\n  File \"/tmp/ansible_xSwWyR/ansible_module_command.py\", line 250, in <module>\r\n    main()\r\n  File \"/tmp/ansible_xSwWyR/ansible_module_command.py\", line 181, in main\r\n    if args.strip() == '':\r\nAttributeError: 'NoneType' object has no attribute 'strip'\r\n", "msg": "MODULE FAILURE", "parsed": false}

- name: Add the cert to the keystore
  become: true
  command: "/usr/bin/keytool -noprompt  -importkeystore -srckeystore {{ ansible_env.HOME }}/idp.p12 -destkeystore {{ tomcat6_config_path }}/domain.keystore  -srcstoretype pkcs12 -srcstorepass {{ cert_password }} -deststorepass {{ keystore_password }}"
  tags:
    - certificates

# - name: Add host cert
#   become: true
#   raw: "/usr/bin/keytool  -import -noprompt -trustcacerts -alias {{ hostvars[groups['shibboleth-idps'][0]]['ansible_fqdn'] }} -file {{ ansible_env.HOME }}/{{ hostvars[groups['shibboleth-idps'][0]]['ansible_fqdn'] | replace('.','_') }}_cert.cer -keystore {{ tomcat6_config_path }}/domain.keystore -storepass {{ keystore_password }}"
#   register: hostcert_result
#   ignore_errors: true
#   #failed_when: "'Certificate was added to keystore' !in hostcert_result.stdout"


# # If the certificate is not available, we need to generate a self-signed and add it to the keystore
# - name: Tell the admin that we're using self-signed
#   local_action:
#     module: set-fact
#     idp_status: test
#   when: cert == false
#   tags:
#     - certificates
#
#
# - name: Copy JKS generator script
#   template:
#     src: jks.expect.j2
#     dest: "{{ tomcat6_config_path }}/jks.expect"
#     mode: "u+x"
#   become: true
#   when: "{{ have_cert.stat.exists }} == false and {{ have_key.stat.exists }} == false"
#   tags:
#     - certificates
#
# - name: Create JKS for tomcat
#   become: yes
#   command: ./jks.expect
#   args:
#     creates: "{{ tomcat6_config_path }}/keystore.jks"
#     chdir: "{{ tomcat6_config_path }}"
#   when: have_cert.stat.exists == false and have_key.stat.exists == false
#   tags:
#     - certificates
