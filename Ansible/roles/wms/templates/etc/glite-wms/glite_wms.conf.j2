[
ICE =  [
    job_cancellation_threshold_time   =   300;
    max_logfile_size   =   100*1024*1024;
    cream_url_prefix   =   "https://";
    start_subscription_updater   =   true;
    max_ice_mem  =  2096000;
    subscription_update_threshold_time   =   3600;
    ice_log_level   =   500;
    listener_enable_authn   =   true;
    listener_enable_authz   =   true;
    poller_status_threshold_time   =   30*60;
    lease_update_frequency   =   20*60;
    lease_delta_time   =   0;
    cream_url_postfix   =   "/ce-cream/services/CREAM2";
    subscription_duration   =   86400;
    start_lease_updater   =   false;
    notification_frequency   =   3*60;
    creamdelegation_url_postfix   =   "/ce-cream/services/gridsite-delegation";
    ice_host_cert   =   "${GLITE_HOST_CERT}";
    cemon_url_postfix   =   "/ce-monitor/services/CEMonitor";
    ice_topic   =   "CREAM_JOBS";
    start_proxy_renewer   =   true;
    Input   =   "${WMS_LOCATION_VAR}/ice/jobdir";
    max_logfile_rotations   =   10;
    start_poller   =   true;
    listener_port   =   7010;
    poller_delay   =   2*60;
    creamdelegation_url_prefix   =   "https://";
    purge_jobs   =   false;
    start_listener   =   false;
    proxy_renewal_frequency   =   600;
    bulk_query_size   =   100;
    soap_timeout   =   60;
    persist_dir   =   "${WMS_LOCATION_VAR}/ice/persist_dir";
    log_on_file  =  true;
    logfile   =   "${WMS_LOCATION_LOG}/ice.log";
    ice_host_key   =   "${GLITE_HOST_KEY}";
    max_ice_threads   =   10;
    proxy_renewal_timeout  =  120;
    log_on_console  =  false;
    cemon_url_prefix   =   "https://";
    ice_empty_threshold  =  600;
    ];
WorkloadManagerProxy =  [
    ArgusAuthz  =  false;
    ListMatchRootPath  =  "/tmp";
    Wms_Pepc_ResourceId  =  "https://{{ wms_host }}:7443/glite_wms_wmproxy_server";
    OperationLoadScripts =  [
          jobSubmit  =  "${WMS_LOCATION_SBIN}/glite_wms_wmproxy_load_monitor --oper jobSubmit --load1 22 --load5 20 --load15 18 --memusage 99 --diskusage 95 --fdnum 1000 --jdnum 1500  --ftpconn 300";
          jobRegister  =  "${WMS_LOCATION_SBIN}/glite_wms_wmproxy_load_monitor --oper jobRegister --load1 22 --load5 20 --load15 18 --memusage 99 --diskusage 95 --fdnum 1000 --jdnum 1500 --ftpconn 300";
          ];
    EnableServiceDiscovery  =  false;
    MinPerusalTimeInterval  =  1000;
    MaxServedRequests  =  50;
    ServiceDiscoveryInfoValidity  =  3600;
    LBServer  =  {"{{ wms_host }}:9000"};
    LBServiceDiscoveryType  =  "org.glite.lb.server";
    LogLevel  =  5;
    SandboxStagingPath  =  "${WMS_LOCATION_VAR}/SandboxDir";
    WeightsCacheValidity  =  86400;
    LogFile  =  "${WMS_LOCATION_LOG}/wmproxy.log";
    AsyncJobStart  =  false;
    GridFTPPort  =  2811;
    ArgusPepdEndpoints  =  {};
    MaxInputSandboxSize  =  100000000;
    ];
NetworkServer =  [
    II_Timeout  =  100;
    QuotaInsensibleDiskPortion  =  2.0;
    SandboxStagingPath  =  "${WMS_LOCATION_VAR}/SandboxDir";
    II_DN  =  "mds-vo-name=local, o=grid";
    MasterThreads  =  8;
    LogFile  =  "${WMS_LOCATION_LOG}/networkserver_events.log";
    LogLevel  =  5;
    II_Contact  =  "{{ top_bdii }}";
    II_Port   =  2170;
    QuotaAdjustmentAmount  =  10000;
    ConnectionTimeout  =  300;
    EnableQuotaManagement  =  false;
    DispatcherThreads  =  10;
    Gris_DN  =  "mds-vo-name=local, o=grid";
    Gris_Port  =  2170;
    DLI_SI_CatalogTimeout  =  60;
    EnableDynamicQuotaAdjustment  =  false;
    ListMatchParadise  =  "${WMS_LOCATION_TMP}/MatchArea";
    Gris_Timeout  =  20;
    BacklogSize  =  64;
    ListeningPort  =  7772;
    MaxInputSandboxSize  =  100000000;
    ];
WorkloadManager =  [
    SbRetryDifferentProtocols  =  true;
    EnableIsmIiGlue20Purchasing  =  false;
    DisablePurchasingFromGris  =  true;
    IsmBlackList  =  {};
    IsmIiG2LDAPCEFilterExt  =  "(|(&(objectclass=GLUE2ComputingService)(|(GLUE2ServiceType=org.glite.ce.ARC)(GLUE2ServiceType=org.glite.ce.CREAM)))(|(objectclass=GLUE2ComputingManager)(|(objectclass=GLUE2ComputingShare)(|(&(objectclass=GLUE2ComputingEndPoint)(GLUE2EndpointInterfaceName=org.glite.ce.CREAM))(|(objectclass=GLUE2ToStorageService)(|(&(objectclass=GLUE2MappingPolicy)(GLUE2PolicyScheme=org.glite.standard))(|(&(objectclass=GLUE2AccessPolicy)(GLUE2PolicyScheme=org.glite.standard))(|(objectclass=GLUE2ExecutionEnvironment)(|(objectclass=GLUE2ApplicationEnvironment)(|(objectclass=GLUE2Benchmark)))))))))))";
    ExpiryPeriod  =  7200;
    EnableIsmIiGlue13Purchasing  =  true;
    IsmDump  =  "${WMS_LOCATION_VAR}/workload_manager/ismdump.fl";
    IsmIiPurchasingRate  =  480;
    MatchRetryPeriod  =  300;
    MaxReplansCount  =  5;
    EnableRecovery  =  true;
    LogLevel  =  5;
    LogFile   =  "${WMS_LOCATION_LOG}/workload_manager_events.log";
    DliServiceName  =  "data-location-interface";
    RuntimeMalloc  =  "/usr/lib64/libjemalloc.so.1";
    BrokerLib  =  "libglite_wms_helper_broker_ism.so.0";
    IsmUpdateRate  =  600;
    WmsRequirements   =  ((ShortDeadlineJob =?= TRUE ? RegExp(".*sdj$", other.GlueCEUniqueID) : !RegExp(".*sdj$", other.GlueCEUniqueID)) && (other.GlueCEPolicyMaxTotalJobs == 0 || other.GlueCEStateTotalJobs < other.GlueCEPolicyMaxTotalJobs) && (EnableWmsFeedback =?= TRUE ? RegExp("cream", other.GlueCEImplementationName, "i") : true) && (member(CertificateSubject,other.GlueCEAccessControlBaseRule) || member(strcat("VO:",VirtualOrganisation),other.GlueCEAccessControlBaseRule) || FQANmember(strcat("VOMS:", VOMS_FQAN), other.GlueCEAccessControlBaseRule)) is true && FQANmember(strcat("DENY:",VOMS_FQAN), other.GlueCEAccessControlBaseRule) isnt true && (IsUndefined(other.OutputSE) || member(other.OutputSE, other.GlueCESEBindGroupSEUniqueID)));
    CeMonitorAsynchPort  =  0;
    QueueSize  =  1000;
    EnableBulkMM  =  true;
    MaxRetryCount  =  10;
    SiServiceName  =  "org.glite.SEIndex";
    IsmIiG2LDAPSEFilterExt   =  "(|(objectclass=GLUE2StorageService)(|(objectclass=GLUE2StorageManager)(|(objectclass=GLUE2StorageShare)(|(objectclass=GLUE2StorageEndPoint)(|(objectclass=GLUE2MappingPolicy)(|(objectclass=GLUE2AccessPolicy)(|(objectclass=GLUE2DataStore)(|(objectclass=GLUE2StorageServiceCapacity)(|(objectclass=GLUE2StorageShareCapacity))))))))))";;
    IsmThreads  =  true;
    IiGlueLib  =  "libglite_wms_ism_ii_purchaser.so.0";
    MaxOutputSandboxSize  =  -1;
    CeForwardParameters  =  {"GlueHostMainMemoryVirtualSize","GlueHostMainMemoryRAMSize","GlueCEPolicyMaxCPUTime", "GlueCEPolicyMaxObtainableCPUTime", "GlueCEPolicyMaxObtainableWallClockTime", "GlueCEPolicyMaxWallClockTime" };
    CeMonitorServices  =  {};
    IsmIiLDAPCEFilterExt  =  "(|(GlueCEAccessControlBaseRule=VO:dteam)(GlueCEAccessControlBaseRule=VOMS:/dteam/*)(GlueCEAccessControlBaseRule=VO:ops)(GlueCEAccessControlBaseRule=VOMS:/ops/*)(GlueCEAccessControlBaseRule=VO:sagrid.ac.za)(GlueCEAccessControlBaseRule=VOMS:/sagrid.ac.za/*)(GlueCEAccessControlBaseRule=VO:eumed)(GlueCEAccessControlBaseRule=VOMS:/eumed/*))";
    ReplanGracePeriod  =  3600;
    Input  =  "${WMS_LOCATION_VAR}/workload_manager/jobdir";
    JobWrapperTemplateDir  =  "${WMS_JOBWRAPPER_TEMPLATE}";
    WorkerThreads  =  5;
    ];
Common =  [
    HostProxyFile  =  "${WMS_LOCATION_VAR}/glite/wms.proxy";
    LBProxy  =  true;
    DGUser  =  "${GLITE_WMS_USER}";
    ];
LogMonitor =  [
    CondorLogRecycleDir  =  "${WMS_LOCATION_VAR}/logmonitor/CondorG.log/recycle";
    LockFile  =  "${WMS_LOCATION_VAR}/logmonitor/lock";
    CondorLogDir  =  "${WMS_LOCATION_VAR}/logmonitor/CondorG.log";
    AbortedJobsTimeout  =  600;
    MonitorInternalDir  =  "${WMS_LOCATION_VAR}/logmonitor/internal";
    MainLoopDuration  =  5;
    GlobusDownTimeout  =  7200;
    LogLevel  =  5;
    JobsPerCondorLog  =  1000;
    LogFile  =  "${WMS_LOCATION_LOG}/logmonitor_events.log";
    ExternalLogFile  =  "${WMS_LOCATION_LOG}/logmonitor_external.log";
    RemoveJobFiles  =  true;
    IdRepositoryName  =  "irepository.dat";
    ForceCancellationRetries  =  2;
    ];
JobController =  [
    Input  =  "${WMS_LOCATION_VAR}/jobcontrol/jobdir/";
    ContainerRefreshThreshold  =  1000;
    CondorQuery  =  "${CONDORG_INSTALL_PATH}/bin/condor_q";
    LogFile  =  "${WMS_LOCATION_LOG}/jobcontroller_events.log";
    MaximumTimeAllowedForCondorMatch  =  1800;
    CondorRelease  =  "${CONDORG_INSTALL_PATH}/bin/condor_release";
    OutputFileDir  =  "${WMS_LOCATION_VAR}/jobcontrol/condorio";
    CondorRemove  =  "${CONDORG_INSTALL_PATH}/bin/condor_rm";
    LockFile  =  "${WMS_LOCATION_VAR}/jobcontrol/lock";
    SubmitFileDir  =  "${WMS_LOCATION_VAR}/jobcontrol/submit";
    CondorSubmit  =  "${CONDORG_INSTALL_PATH}/bin/condor_submit";
    LogLevel  =  5;
    ];
WmsClient =  [
    dummy = dummy;
    ];
]
